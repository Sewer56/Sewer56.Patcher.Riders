<Application x:Class="Sewer56.Patcher.Riders.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:controls="clr-namespace:Reloaded.WPF.Controls;assembly=Reloaded.WPF"
             xmlns:converter="clr-namespace:Reloaded.WPF.Theme.Default.Converter;assembly=Reloaded.WPF.Theme.Default">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- This dictionary switches locations between design and runtime -->
                <controls:DesignTimeResourceDictionary RunTimeSource="pack://siteoforigin:,,,/Theme/Default/Root.xaml" DesignTimeSource="pack://application:,,,/Reloaded.WPF.Theme.Default;component/Theme/Default/Root.xaml"/>
                <controls:DesignTimeResourceDictionary RunTimeSource="pack://siteoforigin:,,,/Theme/Theme.xaml" DesignTimeSource="pack://application:,,,/Reloaded.WPF.Theme.Default;component/Theme/Theme.xaml"/>
                <controls:DesignTimeResourceDictionary RunTimeSource="pack://siteoforigin:,,,/Theme/ExtraControls.xaml" DesignTimeSource="pack://application:,,,/Reloaded.WPF.Theme.Default;component/Theme/ExtraControls.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <!-- Fixups for fun theme shenanigans -->
            <Storyboard x:Key="OpacityFadeOut" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation From="1" To="0.4" Duration="0:0:0.15"/>
            </Storyboard>

            <Storyboard x:Key="OpacityFadeIn" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation From="0.4" To="1" Duration="0:0:0.15"/>
            </Storyboard>

            <Storyboard x:Key="OpacityFadeOutLight" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation From="1" To="0.7" Duration="0:0:0.15"/>
            </Storyboard>

            <Storyboard x:Key="OpacityFadeInLight" Storyboard.TargetProperty="Opacity">
                <DoubleAnimation From="0.7" To="1" Duration="0:0:0.15"/>
            </Storyboard>

            <Style x:Key="WindowControlButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                <Setter Property="Width" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource Self}}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}"/>
                            </Border>

                            <!-- Mouseover Color Switch -->
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource OpacityFadeOut}"/>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource OpacityFadeIn}"/>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DefaultButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

                <!-- Cannot be StaticResource in combination with Animations
                     As local BG colour will not be shared with global. -->
                <Setter Property="Background" Value="{DynamicResource AccentColorLightBrush}"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="Padding" Value="{DynamicResource ButtonPaddingSize}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ButtonBase}">

                            <!-- Background and border color -->
                            <Border x:Name="border" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                SnapsToDevicePixels="True">
                                <ContentPresenter 
                                    x:Name="contentPresenter" 
                                    ContentTemplate="{TemplateBinding ContentTemplate}" 
                                    Content="{TemplateBinding Content}" 
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                    Focusable="False" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    Margin="{TemplateBinding Padding}" 
                                    RecognizesAccessKey="True" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>

                            <ControlTemplate.Triggers>

                                <!-- Mouseover Color Switch -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource OpacityFadeOutLight}"/>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource OpacityFadeInLight}"/>
                                    </Trigger.ExitActions>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButton}"/>

            <!-- Page Header -->
            <Style x:Key="HeaderText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DefaultTextBlock}">
                <Setter Property="FontFamily" Value="{DynamicResource FontThin}" />
                <Setter Property="FontSize" Value="19" />
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
                <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                <Setter Property="Margin" Value="5"/>
            </Style>

            <!-- The code below expects the Window's DataContext to be set to WindowViewModel -->
            <!-- Style the Window. -->
            <Style x:Key="ReloadedWindow" TargetType="{x:Type Window}">

                <!-- Redefine Window Template -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Window}">

                            <AdornerDecorator>
                                <!-- Gives us invisible padding space to allow for rendering of drop shadow. -->
                                <Border Padding="{Binding Path=DropShadowBorderSize}" Background="Transparent">
                                    <Grid>
                                        <!-- The glowing border of the Window.
                                             The important thing is that this must be separate and not nest the content below!
                                             The DropShadowEffect uses all descendant objects to calculate the shape of the shadow. 
                                             which means that every time any children are updated the shadow is recalculated. -->
                                        <Border x:Name="DropShadowBorder"
                                                CornerRadius="{DynamicResource CornerRadius}"
                                                Background="{Binding Path=Background, 
                                                         RelativeSource={RelativeSource AncestorType={x:Type Window}}, 
                                                         FallbackValue=#181818}">
                                            <Border.Effect>
                                                <DropShadowEffect
                                                    ShadowDepth="{DynamicResource GlowDepth}"
                                                    Direction="{DynamicResource GlowDirection}"
                                                    RenderingBias="{DynamicResource GlowRenderBias}"
                                                    Color="{Binding Path=GlowColor,
                                                                    Converter={x:Static converter:ColorToShadowColorConverter.Instance}}"
                                                    BlurRadius="{Binding Path=DropShadowSize}"
                                                    Opacity="{DynamicResource GlowOpacity}" />
                                            </Border.Effect>
                                        </Border>

                                        <!-- This is our window background and the owner of what we see onscreen. -->
                                        <Border x:Name="ContentBorder" Background="Transparent" CornerRadius="{DynamicResource CornerRadius}">
                                            <Border.Clip>
                                                <MultiBinding Converter="{x:Static converter:BorderClipConverter.Instance}">
                                                    <Binding Path="ActualWidth"  RelativeSource="{RelativeSource Self}"/>
                                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                                    <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}"/>
                                                </MultiBinding>
                                            </Border.Clip>

                                            <!-- Main Window Content -->
                                            <Grid>

                                                <!-- TitleBar and rest of page for content. -->
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="{DynamicResource TitleBarHeight}"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>

                                                <!-- Title Bar -->
                                                <Grid Background="{DynamicResource AccentColorLightBrush}" Grid.Row="0">

                                                    <!-- Title & Buttons -->
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"></ColumnDefinition>
                                                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                                                    </Grid.ColumnDefinitions>

                                                    <Viewbox x:Name="ViewBoxTitle1" Grid.Column="0" Grid.ColumnSpan="2" Style="{DynamicResource HeaderAlignment}">
                                                        <TextBlock
                                                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title, FallbackValue='Window Title'}"
                                                            Style="{DynamicResource HeaderText}">
                                                        </TextBlock>
                                                    </Viewbox>

                                                    <Viewbox x:Name="ViewBoxTitle2" Grid.Column="0" Grid.ColumnSpan="2" Style="{DynamicResource HeaderAlignment}">
                                                        <TextBlock
                                                            Text=""
                                                            Style="{DynamicResource HeaderText}">
                                                        </TextBlock>
                                                    </Viewbox>

                                                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                                                        <Button Command="{Binding Path=MinimizeCommand}" 
                                                                Visibility="{Binding Path=MinimizeButtonVisibility}"
                                                                Content="—" 
                                                                Style="{DynamicResource WindowControlButton}"/>

                                                        <Button Command="{Binding Path=MaximizeCommand}" 
                                                                Visibility="{Binding Path=MaximizeButtonVisibility}"
                                                                Content="O" 
                                                                Style="{DynamicResource WindowControlButton}"/>
                                                        
                                                        <Button Command="{Binding Path=CloseCommand}"
                                                                Visibility="{Binding Path=CloseButtonVisibility}"
                                                                Content="X"
                                                                Style="{DynamicResource WindowControlButton}"/>
                                                    </StackPanel>
                                                </Grid>

                                                <!-- Window Content Goes in Here -->
                                                <Grid Grid.Row="1">
                                                    <ContentPresenter Content="{TemplateBinding Content}"/>
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Border>
                            </AdornerDecorator>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <!-- WindowChrome for Window Dragging, Round Corners -->
                <Setter Property="WindowChrome.WindowChrome">
                    <Setter.Value>
                        <WindowChrome CaptionHeight="{Binding Path=WindowChromeTitleBarHeight,
                                              FallbackValue=44}"
                              CornerRadius="{DynamicResource CornerRadius}"
                              ResizeBorderThickness="{Binding Path=ResizeBorderThickness}"
                />
                    </Setter.Value>
                </Setter>

                <!-- Window Properties -->
                <Setter Property="Background" Value="{DynamicResource BackgroundColorBrush}"/>
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="WindowStyle" Value="None"/>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
